generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  passwordHash    String
  emailVerifiedAt DateTime?
  name            String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  profile   Profile?
  roles     UserRole[]
  sessions  AuthSession[]
  audits    AuditEvent[]
  verifications EmailVerification[]
  resets       PasswordReset[]
}

model Profile {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  displayName String?
  avatarUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  userRoles   UserRole[]
}

model UserRole {
  userId     Int
  roleId     Int
  assignedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model AuthSession {
  // jti
  id             String   @id
  userId         Int
  tokenHash      String
  userAgent      String?
  ip             String?
  createdAt      DateTime @default(now())
  expiresAt      DateTime
  rotatedFrom    String?
  rotationCounter Int     @default(0)
  revokedAt      DateTime?
  usedAt         DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([tokenHash])
}

model EmailVerification {
  id         String   @id
  userId     Int
  tokenHash  String
  expiresAt  DateTime
  consumedAt DateTime?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model PasswordReset {
  id         String   @id
  userId     Int
  tokenHash  String
  expiresAt  DateTime
  consumedAt DateTime?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model AuditEvent {
  id        String   @id
  userId    Int?
  action    String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  meta      Json?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
}
