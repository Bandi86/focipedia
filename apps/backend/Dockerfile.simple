# syntax=docker/dockerfile:1.7

# Base with pnpm
FROM node:20-alpine AS base
RUN apk add --no-cache libc6-compat
ENV PNPM_HOME="/root/.local/share/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable && corepack prepare pnpm@9.12.3 --activate
RUN pnpm config set store-dir /root/.pnpm-store

# Builder stage
FROM base AS builder
WORKDIR /repo

# Copy minimal workspace manifests and backend source
COPY ../../package.json ./package.json
COPY ../../pnpm-workspace.yaml ./pnpm-workspace.yaml
COPY ../../pnpm-lock.yaml ./pnpm-lock.yaml
COPY . ./apps/backend

# Install only backend (and its transitive workspaces if any)
# Ignore lifecycle scripts to bypass missing repo-level preinstall
RUN --mount=type=cache,target=/root/.pnpm-store \
    pnpm -w --filter ./apps/backend... install --no-frozen-lockfile --ignore-scripts

# Generate Prisma client and build the backend
WORKDIR /repo/apps/backend
# Add prisma CLI only to the backend workspace, not the root
RUN --mount=type=cache,target=/root/.pnpm-store pnpm --filter ./apps/backend add -D prisma @prisma/client
RUN --mount=type=cache,target=/root/.pnpm-store pnpm --filter ./apps/backend exec prisma generate
RUN --mount=type=cache,target=/root/.pnpm-store pnpm --filter ./apps/backend run build

# Runtime stage
FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production

# Copy built artifacts and runtime deps
COPY --from=builder /repo/apps/backend/dist ./dist
COPY --from=builder /repo/apps/backend/node_modules ./node_modules
COPY --from=builder /repo/apps/backend/package.json ./package.json
COPY --from=builder /repo/apps/backend/prisma ./prisma

EXPOSE 3001
CMD ["node","dist/main.js"]